name: CI

# 모든 스크립트는 발동 조건을 제시 해야함.
on:
    # workflow_dispatch:  깃허브에서 직접 버튼을 눌러 실행
    # pull_request:  매번 pull_request가 실행될때 마다 실행
  push:    # push가 실행될때 마다!!

jobs:
  # 병렬과 직렬구조 모두 가능
  static-analysis:
    # mypy, black, ruff등 정적 분석
    runs-on: ubuntu-22.04
      #가상환경 운영체제 선택 [모든 버전을 고정하는것이 좋음.]
      # 예기치 않은 버전 업그레이드로 인한 오류를 사전에 방지 가능.
    steps:
      - name: Check out the codes
        uses: actions/checkout@v2

      - name: Setup python environment
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: '3.13'

      - name: Install Poetry
        run: |
           curl -sSL https://install.python-poetry.org | python3 - --version 1.8.5
          
      - name : Register Poetry bin
        run: echo '${HOME}/.poetry/bin' >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install --no-root

      # black의 규칙을 잘 지켰는지 체크를 하게됨.(수정을 하지는 않는다.)
      - name: Run Black
        run: poetry run black . --check

      # 위와 같은 의미로 --fix를 이용한 수정을 하지 않는다.
      - name: Run Ruff
        run:
          poetry run ruff check --select I
          poetry run ruff check

      - name: Run Mypy
        run: poetry run mypy .

  # mypy와 test는 병렬구조를 사용하여 시간을 단축시키자!
  test:
    # 전체 테스트 실행
    runs-on: ubuntu-22.04
    steps:
      - name: Check out the codes
        uses: actions/checkout@v2

      - name: Setup python environment
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: '3.13'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version 1.8.5
          
      - name: Register Poetry bin
        run: echo '${HOME}/.poetry/bin' >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install --no-root

      - name: Run tests
        run: |
          poetry run coverage run -m pytest
          poetry run coverage report -m

          
        
